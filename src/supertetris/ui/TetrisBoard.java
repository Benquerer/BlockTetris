package supertetris.ui;

import java.util.logging.Level;
import java.util.logging.Logger;
import supertetris.boards.ConfigGame;
import supertetris.boards.GameListener;

/**
 * This is the Tetris game UI
 * @author Andre Benquerer - nÂ° 24633
 */
public class TetrisBoard extends javax.swing.JFrame implements GameListener {
    
    ConfigGame config; // starts the config object

    public TetrisBoard() {
        initComponents();
        //defines the size of the gameover screen
        gameOver.setSize(612, 519);
        //defines the UI as the listener for the board
        gBoard.setListener(this);
        //sets the frame to the middle of the screen
        setLocationRelativeTo(null);
        try {//checks if there is a config file
            //if so loads that config
            config = ConfigGame.loadConfig();
        } catch (Exception ex) {
            //if not, creates a new default config
            config = new ConfigGame();
            try {
                //saves that new config in as a file
                config.saveConfig();           
            } catch (Exception ex1) {
                //ERROR
                Logger.getLogger(TetrisBoard.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        //sets the score label at the begining of the game
        scorePanel.setText("" + gBoard.getScore());
    }
    
    public TetrisBoard(String cfgName) {
        System.out.println(cfgName);
        initComponents();
        //defines the size of the gameover screen
        gameOver.setSize(612, 519);
        //defines the UI as the listener for the board
        gBoard.setListener(this);
        //sets the frame to the middle of the screen
        setLocationRelativeTo(null);
        try {//checks if there is a config file with especified name
            //if so loads that config
            config = ConfigGame.loadConfig(cfgName);
        } catch (Exception ex) {
            //if not, creates a new default config
            config = new ConfigGame();
            try {
                //saves that new config in as a file
                config.saveConfig();           
            } catch (Exception ex1) {
                //ERROR
                Logger.getLogger(TetrisBoard.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        //sets the score label at the begining of the game
        scorePanel.setText("" + gBoard.getScore());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameOver = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        btPlayAgain = new javax.swing.JButton();
        pnlControls = new javax.swing.JPanel();
        lbCols = new javax.swing.JLabel();
        lbLines = new javax.swing.JLabel();
        spLines = new javax.swing.JSpinner();
        spCols = new javax.swing.JSpinner();
        btCreate = new javax.swing.JButton();
        btDown = new javax.swing.JButton();
        btRight = new javax.swing.JButton();
        btLeft = new javax.swing.JButton();
        btRotate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scorePanel = new javax.swing.JTextPane();
        lbLvl = new javax.swing.JLabel();
        spLvl = new javax.swing.JSpinner();
        gBoard = new supertetris.boards.TetrisGame();

        gameOver.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        gameOver.setAlwaysOnTop(true);
        gameOver.setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/gameover.jpg"))); // NOI18N
        gameOver.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        btPlayAgain.setBackground(new java.awt.Color(153, 153, 153));
        btPlayAgain.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btPlayAgain.setForeground(new java.awt.Color(255, 255, 255));
        btPlayAgain.setText("PLAY AGAIN!!!");
        btPlayAgain.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btPlayAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayAgainActionPerformed(evt);
            }
        });
        gameOver.getContentPane().add(btPlayAgain, java.awt.BorderLayout.SOUTH);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlControls.setBackground(new java.awt.Color(0, 0, 51));
        pnlControls.setForeground(new java.awt.Color(255, 255, 255));

        lbCols.setBackground(new java.awt.Color(153, 153, 153));
        lbCols.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCols.setForeground(new java.awt.Color(255, 255, 255));
        lbCols.setText("Columns");

        lbLines.setBackground(new java.awt.Color(153, 153, 153));
        lbLines.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbLines.setForeground(new java.awt.Color(255, 255, 255));
        lbLines.setText("Lines");
        lbLines.setPreferredSize(new java.awt.Dimension(71, 25));

        spLines.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        spLines.setModel(new javax.swing.SpinnerNumberModel(25, 10, 60, 5));
        spLines.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        spCols.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        spCols.setModel(new javax.swing.SpinnerNumberModel(15, 10, 40, 5));

        btCreate.setBackground(new java.awt.Color(0, 0, 0));
        btCreate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btCreate.setForeground(new java.awt.Color(255, 255, 255));
        btCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/logo.png"))); // NOI18N
        btCreate.setText("reCREATE");
        btCreate.setToolTipText("restart with lines and columns selected above");
        btCreate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        btCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });

        btDown.setBackground(new java.awt.Color(0, 0, 0));
        btDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/down.png"))); // NOI18N
        btDown.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        btDown.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btDown.setMaximumSize(new java.awt.Dimension(59, 60));
        btDown.setMinimumSize(new java.awt.Dimension(59, 60));
        btDown.setPreferredSize(new java.awt.Dimension(59, 60));
        btDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDownActionPerformed(evt);
            }
        });

        btRight.setBackground(new java.awt.Color(0, 0, 0));
        btRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/right.png"))); // NOI18N
        btRight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        btRight.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btRight.setMaximumSize(new java.awt.Dimension(59, 60));
        btRight.setMinimumSize(new java.awt.Dimension(59, 60));
        btRight.setPreferredSize(new java.awt.Dimension(59, 60));
        btRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRightActionPerformed(evt);
            }
        });

        btLeft.setBackground(new java.awt.Color(0, 0, 0));
        btLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/left.png"))); // NOI18N
        btLeft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        btLeft.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLeft.setMaximumSize(new java.awt.Dimension(59, 60));
        btLeft.setMinimumSize(new java.awt.Dimension(59, 60));
        btLeft.setPreferredSize(new java.awt.Dimension(59, 60));
        btLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLeftActionPerformed(evt);
            }
        });

        btRotate.setBackground(new java.awt.Color(0, 0, 0));
        btRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supertetris/resources/rotate.png"))); // NOI18N
        btRotate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        btRotate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRotateActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2), "SCORE:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 24))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        scorePanel.setEditable(false);
        scorePanel.setBackground(new java.awt.Color(0, 0, 0));
        scorePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));
        scorePanel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        scorePanel.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(scorePanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
        );

        lbLvl.setBackground(new java.awt.Color(153, 153, 153));
        lbLvl.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbLvl.setForeground(new java.awt.Color(255, 255, 255));
        lbLvl.setText("Level");

        spLvl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        spLvl.setModel(new javax.swing.SpinnerNumberModel(1, 0, 9, 1));

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spLines, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbLines, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addComponent(lbCols)
                                .addGap(27, 27, 27)
                                .addComponent(lbLvl))
                            .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addComponent(spCols, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spLvl, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlControlsLayout.createSequentialGroup()
                                        .addComponent(btDown, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCols)
                    .addComponent(lbLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbLvl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spLines, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spCols, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spLvl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        getContentPane().add(pnlControls, java.awt.BorderLayout.WEST);

        gBoard.setBackground(new java.awt.Color(0, 0, 51));
        gBoard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gBoardKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout gBoardLayout = new javax.swing.GroupLayout(gBoard);
        gBoard.setLayout(gBoardLayout);
        gBoardLayout.setHorizontalGroup(
            gBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
        );
        gBoardLayout.setVerticalGroup(
            gBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        getContentPane().add(gBoard, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gBoardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gBoardKeyPressed
        //defines the movent in the game to be based on the config file
        config.moveByKey(evt, gBoard);
    }//GEN-LAST:event_gBoardKeyPressed

    private void btRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRotateActionPerformed
        //rotates the piece if the rotate button is pressed
        gBoard.rotate();
    }//GEN-LAST:event_btRotateActionPerformed

    private void btLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeftActionPerformed
        //moves the piece left if the move left button is pressed
        gBoard.moveLeft();
    }//GEN-LAST:event_btLeftActionPerformed

    private void btRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRightActionPerformed
        //moves the piece right if the move right button is pressed
        gBoard.moveRight();
    }//GEN-LAST:event_btRightActionPerformed

    private void btDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDownActionPerformed
        //moves the piece down if the move down button is pressed
        gBoard.moveDown();
        if (!gBoard.canMovePiece(1, 0)) {
            //if the piece cant move down, freezes it and generates a new one
            gBoard.freezePiece();
            gBoard.generateRandomPiece();
        }
    }//GEN-LAST:event_btDownActionPerformed

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        //creates a new game with the specified settings
        int lines = (Integer) spLines.getValue(); // gets the lines from the spinner
        int cols = (Integer) spCols.getValue(); // gets the columns from the spinner
        int level = (Integer) spLvl.getValue(); // gets the level from the spinner
        //uses the spinner values to restart the game
        gBoard.reStartGame(lines, cols, level);
        //resets the score
        gBoard.setScore(0);
        //updates the score panel
        scorePanel.setText(String.valueOf(gBoard.getScore()));
    }//GEN-LAST:event_btCreateActionPerformed

    private void btPlayAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayAgainActionPerformed
        //same as a recreate, but triggered from the play again button on the gameOver dialog
        gameOver.setVisible(false);
        int lines = (Integer) spLines.getValue();
        int cols = (Integer) spCols.getValue();
        int level = (Integer) spLvl.getValue();
        gBoard.reStartGame(lines, cols, level);
        gBoard.setScore(0);
        scorePanel.setText(String.valueOf(gBoard.getScore()));
    }//GEN-LAST:event_btPlayAgainActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //stops the game if the window is closed
        gBoard.stopGame();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TetrisBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TetrisBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TetrisBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TetrisBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TetrisBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btDown;
    private javax.swing.JButton btLeft;
    private javax.swing.JButton btPlayAgain;
    private javax.swing.JButton btRight;
    private javax.swing.JButton btRotate;
    private supertetris.boards.TetrisGame gBoard;
    private javax.swing.JDialog gameOver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCols;
    private javax.swing.JLabel lbLines;
    private javax.swing.JLabel lbLvl;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JTextPane scorePanel;
    private javax.swing.JSpinner spCols;
    private javax.swing.JSpinner spLines;
    private javax.swing.JSpinner spLvl;
    // End of variables declaration//GEN-END:variables
    
    /*
        Rewriting all the methods from the GameListener interface
    */

    @Override
    public void onGameOver() {
        //makes the gameover screen visible
        gameOver.setVisible(true);
        gameOver.setLocationRelativeTo(null);
    }

    @Override
    public void onDeleteLine(int score) {
        //updates the score whenever a line is deleted
        scorePanel.setText("" + score);
    }

    @Override
    public void piecePlaced() {
        //updates the score whenever a piecce is placed
       gBoard.setScore(gBoard.getScore()+(int)(5*gBoard.getMultiplier())); //sets the score based on the multiplier of the game
       scorePanel.setText(""+gBoard.getScore());
    }
    
    @Override
    public void onFallDown(){
        //updates the score whenever the user uses the fall down key
        gBoard.setScore(gBoard.getScore()+(int)(5*gBoard.getMultiplier())); //sets the score based on the multiplier of the game
        scorePanel.setText(""+gBoard.getScore());
    }
}
